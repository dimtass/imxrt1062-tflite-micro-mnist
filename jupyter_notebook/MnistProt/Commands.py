# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MnistProt

import flatbuffers

class Commands(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCommands(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Commands()
        x.Init(buf, n + offset)
        return x

    # Commands
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Commands
    def Cmd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Commands
    def Stats(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Stats import Stats
            obj = Stats()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Commands
    def Input(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .InferenceInput import InferenceInput
            obj = InferenceInput()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Commands
    def Ouput(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .InferenceOutput import InferenceOutput
            obj = InferenceOutput()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def CommandsStart(builder): builder.StartObject(4)
def CommandsAddCmd(builder, cmd): builder.PrependInt8Slot(0, cmd, 0)
def CommandsAddStats(builder, stats): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stats), 0)
def CommandsAddInput(builder, input): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(input), 0)
def CommandsAddOuput(builder, ouput): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ouput), 0)
def CommandsEnd(builder): return builder.EndObject()
