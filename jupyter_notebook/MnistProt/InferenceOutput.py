# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MnistProt

import flatbuffers

class InferenceOutput(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsInferenceOutput(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InferenceOutput()
        x.Init(buf, n + offset)
        return x

    # InferenceOutput
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InferenceOutput
    def OutputF(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # InferenceOutput
    def OutputFAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # InferenceOutput
    def OutputFLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InferenceOutput
    def OutputN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # InferenceOutput
    def TimerMs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def InferenceOutputStart(builder): builder.StartObject(3)
def InferenceOutputAddOutputF(builder, outputF): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(outputF), 0)
def InferenceOutputStartOutputFVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def InferenceOutputAddOutputN(builder, outputN): builder.PrependUint8Slot(1, outputN, 0)
def InferenceOutputAddTimerMs(builder, timerMs): builder.PrependFloat32Slot(2, timerMs, 0.0)
def InferenceOutputEnd(builder): return builder.EndObject()
